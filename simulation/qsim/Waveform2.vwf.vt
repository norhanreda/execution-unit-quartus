// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2021 12:42:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Eu
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Eu_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] D;
reg [1:0] destination;
reg [1:0] operation;
reg [1:0] source;
// wires                                               
wire [3:0] A;
wire [3:0] B;
wire [3:0] C;
wire cout;

// assign statements (if any)                          
Eu i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.cout(cout),
	.D(D),
	.destination(destination),
	.operation(operation),
	.source(source)
);
initial 
begin 
#1000000 $finish;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b1;
	D[2] = #50000 1'b0;
	D[2] = #50000 1'b1;
	D[2] = #50000 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b1;
	D[0] = #100000 1'b0;
end 
// operation[ 1 ]
initial
begin
	operation[1] = 1'b0;
	operation[1] = #220000 1'b1;
	operation[1] = #170000 1'b0;
end 
// operation[ 0 ]
initial
begin
	operation[0] = 1'b0;
	operation[0] = #150000 1'b1;
	operation[0] = #240000 1'b0;
end 
// source[ 1 ]
initial
begin
	source[1] = 1'b1;
	source[1] = #220000 1'b0;
end 
// source[ 0 ]
initial
begin
	source[0] = 1'b1;
	source[0] = #150000 1'b0;
	source[0] = #70000 1'b1;
	source[0] = #170000 1'b0;
end 
// destination[ 1 ]
initial
begin
	destination[1] = 1'b0;
	destination[1] = #100000 1'b1;
	destination[1] = #50000 1'b0;
	destination[1] = #70000 1'b1;
	destination[1] = #170000 1'b0;
end 
// destination[ 0 ]
initial
begin
	destination[0] = 1'b0;
	destination[0] = #50000 1'b1;
	destination[0] = #50000 1'b0;
end 
endmodule

